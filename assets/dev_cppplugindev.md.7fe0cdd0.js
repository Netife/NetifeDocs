import{_ as s,o as a,c as n,O as l}from"./chunks/framework.3029e660.js";const d=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"dev/cppplugindev.md","filePath":"dev/cppplugindev.md","lastUpdated":1684595018000}'),o={name:"dev/cppplugindev.md"},p=l(`<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><p>本教程旨在告诉你如何开发 C++ 插件。</p><h1 id="c-插件体开发" tabindex="-1">C++ 插件体开发 <a class="header-anchor" href="#c-插件体开发" aria-label="Permalink to &quot;C++ 插件体开发&quot;">​</a></h1><h2 id="前置需求" tabindex="-1">前置需求 <a class="header-anchor" href="#前置需求" aria-label="Permalink to &quot;前置需求&quot;">​</a></h2><p>C++插件开发需要有<code>Poco</code>作为前置依赖库，我们推荐通过<code>vcpkg</code>来管理你的依赖包。</p><h3 id="安装vcpkg作为包管理器" tabindex="-1">安装Vcpkg作为包管理器 <a class="header-anchor" href="#安装vcpkg作为包管理器" aria-label="Permalink to &quot;安装Vcpkg作为包管理器&quot;">​</a></h3><p>首先，你需要安装 Vcpkg 作为你的包管理器，你可以在<a href="https://github.com/microsoft/vcpkg" target="_blank" rel="noreferrer">vcpkg</a>的官方仓库中找到具体的安装说明。</p><h3 id="安装前置依赖库" tabindex="-1">安装前置依赖库 <a class="header-anchor" href="#安装前置依赖库" aria-label="Permalink to &quot;安装前置依赖库&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">vcpkg</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">poco:x64-windows</span></span></code></pre></div><p>此命令会安装 x64 版本的 poco 库，如果你是 32 位计算机，可以更改为 <code>x86-windows</code>。</p><h3 id="可选-声明环境变量" tabindex="-1">（可选）声明环境变量 <a class="header-anchor" href="#可选-声明环境变量" aria-label="Permalink to &quot;（可选）声明环境变量&quot;">​</a></h3><p>在 Clion 等非 VS 的 ide 开发时，你可能需要声明你的包路径到 Path 环境变量中。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">vcpkg</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">integrate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p>如果你发现你无法找到包，你可能还需要配置你的环境变量，在 Path 变量中添加你安装的 Poco 的 Bin 路径。这个目录通常在 Vcpkg 的 packages 的对应 Poco 目录中可以找到。</p><h2 id="拉取-c-插件开发模板" tabindex="-1">拉取 C++ 插件开发模板 <a class="header-anchor" href="#拉取-c-插件开发模板" aria-label="Permalink to &quot;拉取 C++ 插件开发模板&quot;">​</a></h2><p>使用 Git 拉取<a href="https://github.com/Netife/NetifeCppPluginTemplateV1" target="_blank" rel="noreferrer">C++插件模板)</a>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git clone git@github.com:Netife/NetifeCppPluginTemplateV1.git</span></span></code></pre></div><p>然后基于此目录创建你的工程文件。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在C++模板中，远程库以 origin 的别名存储，如果你需要使用 Git 托管你的代码，你可能需要删除原有的 origin 远程库</p></div><h2 id="编写插件体代码" tabindex="-1">编写插件体代码 <a class="header-anchor" href="#编写插件体代码" aria-label="Permalink to &quot;编写插件体代码&quot;">​</a></h2><p>在插件模板中，<code>DemoClass</code>为示例的插件体代码，你可以看到它是一个<code>NetifePlugins</code>的子类，你可以在 API 文档中，或者根据模板的注释来开发你的插件。</p><h2 id="导出类" tabindex="-1">导出类 <a class="header-anchor" href="#导出类" aria-label="Permalink to &quot;导出类&quot;">​</a></h2><p>在插件中，如果你想要你的插件被 Netife 框架识别，你需要导出类，在 <code>DemoClass</code>的 CPP 文件中给出了具体导出类的方法：</p><div class="language-c++"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">POCO_BEGIN_MANIFEST(NetifePlugins)</span></span>
<span class="line"><span style="color:#A6ACCD;">        POCO_EXPORT_CLASS(DemoClass)</span></span>
<span class="line"><span style="color:#A6ACCD;">POCO_END_MANIFEST</span></span></code></pre></div><p>你只需要更改 <code>DemoClass</code> 为你的类名称即可</p><h2 id="为插件加载做出额外操作" tabindex="-1">为插件加载做出额外操作 <a class="header-anchor" href="#为插件加载做出额外操作" aria-label="Permalink to &quot;为插件加载做出额外操作&quot;">​</a></h2><p>在导出类之后，可以添加函数，在加载前和卸载前进行一些操作。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">void pocoInitializeLibrary()</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">void pocoUninitializeLibrary()</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这与 Netife 框架提供的加载事件不同，这些函数在 Netife 插件框架接触到插件体前或者后调用，Netife 框架无法感知他们的存在，因此不建议在这些函数中做过多的业务处理。一个好的实践是完全不使用他们，因为你甚至无法在这个阶段使用 Netife 提供的 AgentApi 来反调用框架的 Api，这意味着你的日志输出甚至都无法接入框架。</p></div><h2 id="编译插件" tabindex="-1">编译插件 <a class="header-anchor" href="#编译插件" aria-label="Permalink to &quot;编译插件&quot;">​</a></h2><p>请以<strong>SHARED</strong>的方式编译插件，在插件模板中已经提供了对应的 CMAKELISTS 文件。</p><div class="language-cmake"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">cmake_minimum_required</span><span style="color:#A6ACCD;">(VERSION 3.25)</span></span>
<span class="line"><span style="color:#89DDFF;">project</span><span style="color:#A6ACCD;">(NetifeCppPluginTemplateV1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">set</span><span style="color:#A6ACCD;">(CMAKE_CXX_STANDARD 23)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">find_package</span><span style="color:#A6ACCD;">(Poco REQUIRED Foundation)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">add_library</span><span style="color:#A6ACCD;">(NetifeCppPluginTemplateV1</span></span>
<span class="line"><span style="color:#89DDFF;">        include</span><span style="color:#A6ACCD;">/plugins/v1/NetifePlugins.h</span></span>
<span class="line"><span style="color:#89DDFF;">        include</span><span style="color:#A6ACCD;">/plugins/v1/NetifePluginAgent.h</span></span>
<span class="line"><span style="color:#A6ACCD;">        library.h</span></span>
<span class="line"><span style="color:#A6ACCD;">        library.cpp DemoClass.cpp DemoClass.h)</span></span>
<span class="line"><span style="color:#89DDFF;">target_link_libraries</span><span style="color:#A6ACCD;">(NetifeCppPluginTemplateV1 PRIVATE Poco::Foundation)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果你使用的是 Clion，你可能需要将 CMAKE 的解释器等换成 VS 的，并且将 Vcpkg 以工具链的形式添加到 CMake 执行参数。</p></div><h2 id="编写-json-文件" tabindex="-1">编写 Json 文件 <a class="header-anchor" href="#编写-json-文件" aria-label="Permalink to &quot;编写 Json 文件&quot;">​</a></h2><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Music163SongDownload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">clsid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">6966d3e8-c14b-4485-bd91-bd97d85002e1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">author</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">EpicMo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exportWay</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cpp</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">本插件提供网易云音乐服务。</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">coreRelative</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">v1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exportCommand</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Netife.CppExport()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exportClassName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CloudMusic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">relativeChains</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:[],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">registerCommand</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:[],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">registerHook</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:[]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这个为一个示例的插件模板，以下是基本的介绍： 你需要为插件提供一些基本的信息，其中：</p><ul><li>clsid：为UUID，你需要提供一个随机生成的 UUID 作为插件的标识符</li><li>version：格式为 A.B.C</li><li>exportWay：为 <code>cpp</code> ，因为你是在 <code>cpp</code> 中编写插件的</li><li>coreRelative：<code>v1</code> ，这个依赖于你插件开发依赖的框架 API 版本，本教程使用的是 Netife Interface V1，这取决于具体的插件和 API 版本</li><li>exportCommand：为固定值，不用更改，表示以 <code>Netife.CppExport()</code> 的抽象函数加载插件</li><li>exportClassName：为需要被加载的插件的类名，以<code>;</code>的方式分割</li></ul><h2 id="依赖链" tabindex="-1">依赖链 <a class="header-anchor" href="#依赖链" aria-label="Permalink to &quot;依赖链&quot;">​</a></h2><h3 id="依赖链介绍" tabindex="-1">依赖链介绍 <a class="header-anchor" href="#依赖链介绍" aria-label="Permalink to &quot;依赖链介绍&quot;">​</a></h3><p>在 C++ 插件中，你可能会使用 AgentApi 去调用其他的插件暴露的命令，这引入了对于其他插件的依赖，因此你可能需要确保其他插件的版本在一个固定的范围，以保证插件调用其他命令的返回值稳定性。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">relativeChains</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NetifePluginLib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1.0.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span></code></pre></div><p>例如，在这个地方声明了对于 <code>NetifePluginLib</code> 的依赖，其版本需要大于等于 1.0.0</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>依赖插件如果不存在，那么本插件也不会加载。注意的是，<code>NetifePluginLib</code>为 Netife 内置插件，不需要用户手动下载。但是我们也建议你添加这个依赖以防止出现用户删除了这个插件的意外情况。</p></div><h3 id="依赖链编写规则" tabindex="-1">依赖链编写规则 <a class="header-anchor" href="#依赖链编写规则" aria-label="Permalink to &quot;依赖链编写规则&quot;">​</a></h3><p>其中，依赖链的表达式如下：</p><ul><li><code>|</code>：和，表示取并</li><li><code>&gt;</code>：大于，表示大于某个版本</li><li><code>&lt;</code>：小于，表示小于某个版本</li><li><code>^</code>：大于等于，表示大于等于某个版本</li><li><code>~</code>：小于等于，表示小于等于某个版本</li></ul><p>例如：<code>^1.0.0|&lt;1.2.0</code>表示的是：大于等于1.0.0版本，并小于1.2.0版本</p><h2 id="导出命令" tabindex="-1">导出命令 <a class="header-anchor" href="#导出命令" aria-label="Permalink to &quot;导出命令&quot;">​</a></h2><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">registerCommand</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myHelloClass</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">command</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sayHello [content] &lt;prefix&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">输出 Hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span></code></pre></div><p>导出命令的意思是导出某个类的某个命令，例如上述为描述 <code>myHelloClass</code>的<code>sayHello</code>命令。</p><p>其中，命令的调用会传入插件的<code>DispatchCommand</code>函数中，并由开发者自己处理或者分发到子函数。</p><p>对于命令参数的描述，有两种方式：</p><ul><li><code>[variable]</code>：必选参数</li><li><code>&lt;variable&gt;</code>：可选参数</li></ul><p>当必选参数不存在时，插件不会接受到命令调用。当可选参数为空是，插件会接收到可选参数的调用。</p><p>命令的传递是通过<code>map&lt;string,optinal&lt;string&gt;&gt;</code>进行传递，也就是可选参数不存在时，值为<code>optnull</code>。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>为避免歧义，可选参数只能出现在必选参数之后。</p></div><h1 id="插件-hook-开发" tabindex="-1">插件 Hook 开发 <a class="header-anchor" href="#插件-hook-开发" aria-label="Permalink to &quot;插件 Hook 开发&quot;">​</a></h1><p>Hook的表现形式是若干的节点，他表示的是框架或者插件运行的某个自定义节点。</p><p>Hook节点可以在 Netife Ref 中找到，以下提供一个示例写法：</p><h3 id="注册清单" tabindex="-1">注册清单 <a class="header-anchor" href="#注册清单" aria-label="Permalink to &quot;注册清单&quot;">​</a></h3><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">registerHook</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">netife.network.receive</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">symbol</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Test</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre></div><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>你可以在任意一个 CPP 源文件来声明这个函数，并且以 C 方式导出，具体示例可以参见 C++ 插件模板。</p><div class="language-c++"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#include &quot;library.h&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">#include &lt;iostream&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">#include &quot;include/plugins/v1/NetifePluginAgent.h&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">#if defined(_WIN32)</span></span>
<span class="line"><span style="color:#A6ACCD;">#define LIBRARY_API __declspec(dllexport)</span></span>
<span class="line"><span style="color:#A6ACCD;">#else</span></span>
<span class="line"><span style="color:#A6ACCD;">#define LIBRARY_API</span></span>
<span class="line"><span style="color:#A6ACCD;">#endif</span></span>
<span class="line"><span style="color:#A6ACCD;">extern &quot;C&quot; void LIBRARY_API Test(NetifePluginAgent* agent);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">void Test(NetifePluginAgent* agent) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    agent-&gt;LogInfo(&quot;Hello, This symbol has been hooked!!!&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    //Todo something...</span></span>
<span class="line"><span style="color:#A6ACCD;">    //这个地方可以执行具体的过程，注，关于 Hook 的具体定义需要在 Netife Develop Guide 查看，确保函数原型一样</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>函数原型应该在 Netife Ref 中查找，此外，你应该保证声明的 Symbol 和函数名称一样。</p></div>`,65),e=[p];function t(c,r,i,D,y,F){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{d as __pageData,u as default};
